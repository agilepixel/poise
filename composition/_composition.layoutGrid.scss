/**
  *   #GRID
  */

.c-layout {
  &--grid {
    display: grid;
    gap: var(--spaceGrid) var(--spaceGrid);

    @each $column in $columnNumber {
      &--column-#{$column} {
        grid-template-columns: repeat(#{$column}, 1fr);
      }
    }

    @each $breakpoint, $value in $gridBreakpoints {
      @include mq($until: #{$value}) {
        @each $column in $columnNumber {
          &--column-#{$column}#{$breakpoint-separator}#{$breakpoint} {
            grid-template-columns: repeat(#{$column}, 1fr);
          }
        }
      }
    }
  }

  &--flex {
    display: flex;
    flex-wrap: wrap;
    margin: 0 0 0 var(--spaceGridNegative);

    .c-layout__item {
      padding-left: var(--spaceGrid);
      flex-grow: 1;
    }

    // Different column sizes
    @each $size in $columnSizes {
      $roundsize: floor($size);

      .c-layout__item-#{$roundsize} {
        flex-basis: $size * 1%;
        max-width: $size * 1%;
      }
    }

    @each $breakpoint, $value in $gridBreakpoints {
      @include mq($until: #{$value}) {
        @each $size in $columnSizes {
          $roundsize: floor($size);

          .c-layout__item-#{$roundsize}#{$breakpoint-separator}#{$breakpoint} {
            flex-basis: $size * 1%;
            max-width: $size * 1%;
          }
        }
      }
    }

    &--flush {
      & > .c-layout__item {
        padding-left: 0;
      }
    }
  }

  &--flush {
    margin-left: 0;
    gap: 0;
  }
}
