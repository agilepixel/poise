/**
  *   RATIO
  */

@use 'sass:math';
@use '../settings' as variables;
@use 'sass-mq' as *;

.c-ratio {
  position: relative;
  display: block;
  width: 100%;

  &:before {
    content: '';
    display: block;
    width: 100%;
    padding-bottom: 100%; /* [1] */
  }
}

.c-ratio__content,
.c-ratio > iframe,
.c-ratio > embed,
.c-ratio > object,
.c-ratio > video {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
}

/* Ratio variants.
   ========================================================================== */

/**
 * Generate a series of ratio classes to be used like so:
 *
 *   <div class="o-ratio  o-ratio--golden-ratio">
 *
 */

@each $ratio-name, $ratio-value in variables.$inuit-ratios {
  @each $antecedent, $consequent in $ratio-value {
    @if (type-of($antecedent) != number) {
      @error "`#{$antecedent}` needs to be a number.";
    }

    @if (type-of($consequent) != number) {
      @error "`#{$consequent}` needs to be a number.";
    }

    .c-ratio--#{$ratio-name}::before {
      padding-bottom: math.div($consequent, $antecedent) * 100%;
    }
  }

  @each $breakpoint, $value in variables.$gridBreakpoints {
    @include mq($until: #{$value}) {
      @each $antecedent, $consequent in $ratio-value {
        .c-ratio--#{$ratio-name}#{variables.$breakpoint-separator}#{$breakpoint}::before {
          padding-bottom: math.div($consequent, $antecedent) * 100%;
        }
      }
    }
  }
}

/* Contain modifier.
   ========================================================================== */

/**
 * Only works with image content.
 * Contains the image to the boundaries, without cropping or stretching it.
 */

.c-ratio--img-contain {
  > .c-ratio__content {
    height: auto;
    margin: auto;
    max-height: 100%;
    max-width: 100%;
    width: auto;
  }
}
