/**
  *   #GRID
  */

.col {
  padding-left: space(site, grid);
  flex-grow: 1;
}

.grid {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0 0 0 space(negative, grid);

  + .grid {
    margin-top: 0;
  }

  &--nomargin {
    margin: 0;

    & > .col {
      padding-left: 0;
    }
  }
  &__spacing,
  &__limited {
    padding-top: 1.5em;

    @include mq($from: tablet) {
      padding-top: space(site, desktopSpacing);
    }

    .col {
      margin-bottom: space(site, grid);
    }
  }
  &--doubleMargin {
    margin: 0 0 0 -1.5em;
    .col {
      padding-left: 1.5em;
    }
  }
}

// Alignement of items. Use with .grid
@each $position, $value in $grid-position {
  .grid-#{$position} {
    justify-content: $value;
  }
}

@each $breakpoint, $value in $grid-breakpoints {
  @include mq($until: #{$value}) {
    @each $position, $value in $grid-position {
      .grid-#{$position}-#{$breakpoint} {
        justify-content: $value;
      }
    }
  }
}

@each $breakpoint, $value in $grid-breakpoints {
  @include mq($until: #{$value}) {
    .grid-reverse-#{$breakpoint} {
      flex-direction: row-reverse;
    }
  }
}

// Different column sizes
@each $size in $column-sizes {
  $roundsize: floor($size);

  .col-#{$roundsize} {
    flex-basis: $size * 1%;
    max-width: $size * 1%;
  }
}

@each $breakpoint, $value in $grid-breakpoints {
  @include mq($until: #{$value}) {
    @each $size in $column-sizes {
      $roundsize: floor($size);

      .col-#{$roundsize}-#{$breakpoint} {
        flex-basis: $size * 1%;
        max-width: $size * 1%;
      }
    }
  }
}

// Align item to the top, center, or bottom
@each $position, $value in $grid-position {
  .col-#{$position} {
    align-self: $value;
  }
}

@each $breakpoint, $value in $grid-breakpoints {
  @include mq($until: #{$value}) {
    @each $position, $value in $grid-position {
      .col-#{$position}-#{$breakpoint} {
        align-self: $value;
      }
    }
  }
}
