/*-------------------------*/


/* +GRID                   */


/*-------------------------*/

// Container for each row
.grid,
.jeet--grid .top_label {
  list-style: none;
  height: 100%;
  margin: 0 0 0 space(negative);
  clear: both;
  &--nomargin {
    margin: 0;
    &>[class*="col-"] {
      padding-left: 0;
    }
  }
  &--center {
    text-align: center;
  }
}

// Global settings for columns
[class*="col-"],
.jeet--one-half--loop,
.jeet--one-whole--noloop {
  display: inline-block;
  list-style: none;
  padding-left: space(site);
  vertical-align: top;
}

.nogutter {
  padding-left: 0;
}

// Alignement of items. Use with .grid
@each $position,
$value in $grid-position {
  .grid-#{$position} {
    text-align: $value;
  }
}

@each $breakpoint,
$value in $grid-breakpoints {
  @include mq($until: $value) {
    @each $position, $value in $grid-position {
      .grid-#{$position}-#{$breakpoint} {
        text-align: $value;
      }
    }
  }
}

// Different column sizes
@each $size in $column-sizes {
  $roundsize: floor($size);
  .col-#{$roundsize} {
    $val: $size * 1%;
    width: $val;
  }
}

@each $breakpoint,
$value in $grid-breakpoints {
  @include mq($until: $value) {
    @each $size in $column-sizes {
      $roundsize: floor($size);
      .col-#{$roundsize}-#{$breakpoint} {
        $val: $size * 1%;
        width: $val;
      }
    }
  }
}

// Align item to the top, center, or bottom
@each $position,
$value in $grid-position {
  .col-#{$position} {
    align-self: $value;
  }
}

@each $breakpoint,
$value in $grid-breakpoints {
  @include mq($until: $value) {
    @each $position, $value in $grid-position {
      .col-#{$position}-#{$breakpoint} {
        align-self: $value;
      }
    }
  }
}

.flex-grid {
  display: flex;
}

.col__pull-right {
  float: right;
}

.jeet--one-half--loop {
  width: 100%;
  padding: 0 0 space(site) space(site);
}

.jeet--one-whole--noloop {
  width: 100%;
  padding: 0 0 space(site) space(site);
}
