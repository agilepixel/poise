/* ==========================================================================
   #FLAG
   ========================================================================== */

/**
 * The flag object is a design pattern similar to the media object, however it
 * utilises `display: table[-cell];` to give us control over the vertical
 * alignments of the text and image.
 *
 * http://csswizardry.com/2013/05/the-flag-object/
 *
 * 1. Allows us to control vertical alignments.
 * 2. Force the object to be the full width of its parent. Combined with [1],
 *    this makes the object behave in a quasi-`display: block;` manner.
 * 3. Reset inherited `border-spacing` declarations.
 */

.o-flag {
  display: flex; /* [1] */
  width: 100%; /* [2] */
  align-items: center;
  flex-wrap: wrap;
}

/**
   * Flag images have a space between them and the body of the object.
   *
   * 1. Force `.o-flag__img` to take up as little space as possible:
   *    https://pixelsvsbytes.com/2012/02/this-css-layout-grid-is-no-holy-grail/
   */

.o-flag__img {
  padding-right: $inuit-global-spacing-unit;

  /**
     * 1. Fixes problem with images disappearing.
     *
     *    The direct child selector '>' needs to remain in order for nested flag
     *    objects to not inherit their parent's formatting. In case the image tag
     *    is wrapped into another tag, e.g. an anchor for linking reasons, it will
     *    disappear. In that case try wrapping the whole o-flag__img object into
     *    an anchor tag.
     *
     *    E.g.:
     *
     *      <a href="/">
     *        <div class="o-flag__img">
     *          <img src="./link/to/image.jpg" alt="image alt text">
     *        </div>
     *      </a>
     */

  > img {
    align-self: center;
  }
}

/**
   * The container for the main content of the flag object.
   *
   * 1. Forces the `.flag__body` to take up all remaining space.
   */

.o-flag__body {
  flex-grow: 1;

  &,
  > :last-child {
    margin-bottom: 0;
  }
}

/* Size variants
   ========================================================================== */
@include mq($from: mobile) {
  .o-flag--flush {
    > .o-flag__img {
      padding-right: 0;
      padding-left: 0;
    }
  }

  @each $name, $variable in $inuitSizes {
    .o-flag--#{$name} {
      > .o-flag__img {
        padding-right: $variable;
      }

      &.o-flag--reverse {
        > .o-flag__img {
          padding-right: 0;
          padding-left: $variable;
        }
      }
    }
  }
}
/* Reversed flag
   ========================================================================== */

/**
 * 1. Swap the rendered direction of the object…
 * 2. …and reset it.
 * 3. Reassign margins to the correct sides.
 */

.o-flag--reverse {
  .o-flag__img {
    order: 2;
  }
  .o-flag__body {
    order: 1;
  }
  @include mq($from: mobile) {
    > .o-flag__img {
      padding-right: 0; /* [3] */
      padding-left: $inuit-global-spacing-unit; /* [3] */
    }
  }
}

/* Alignment variants
   ========================================================================== */

/**
 * Vertically align the image- and body-content differently. Defaults to middle.
 */

.o-flag--top {
  align-items: flex-start;
}

.o-flag--bottom {
  align-items: flex-end;
}
